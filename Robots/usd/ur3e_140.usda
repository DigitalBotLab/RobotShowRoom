#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (0.9680218914261677, 0.2092155848708915, 0.7009960329260566)
                double3 target = (0.14277578669365099, 0.1360464826755527, -0.018373228952582754)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            int "rtx:externalFrameCounter" = 82216
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Z"
)

over "Render" (
    hide_in_stage_window = true
)
{
}

def Xform "World"
{
    def "ur3e_robotiq_140" (
        instanceable = false
        prepend payload = @file:/D:/DBL/ForBlendid/Robots/emsemble/ur3e_robotiq_140/ur3e_robotiq_140.usd@
    )
    {
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "ur3e_base_link"
        {
            over "ur3e_shoulder_pan_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "ur3e_shoulder_link"
        {
            over "ur3e_shoulder_lift_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }

            over "visuals"
            {
                token visibility = "inherited"
            }

            over "collisions"
            {
                token visibility = "inherited"
            }
        }

        over "ur3e_upper_arm_link"
        {
            over "ur3e_elbow_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }

            over "visuals"
            {
                token visibility = "inherited"
            }

            over "collisions"
            {
                token visibility = "inherited"
            }
        }

        over "ur3e_forearm_link"
        {
            over "ur3e_wrist_1_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }

            over "visuals"
            {
                token visibility = "inherited"
            }

            over "collisions"
            {
                token visibility = "inherited"
            }
        }

        over "ur3e_wrist_1_link"
        {
            over "ur3e_wrist_2_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }

            over "visuals"
            {
                token visibility = "inherited"
            }

            over "collisions"
            {
                token visibility = "inherited"
            }
        }

        over "ur3e_wrist_2_link"
        {
            over "ur3e_wrist_3_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }

            over "visuals"
            {
                token visibility = "inherited"
            }

            over "collisions"
            {
                token visibility = "inherited"
            }
        }

        over "ur3e_wrist_3_link"
        {
            over "visuals"
            {
                token visibility = "inherited"
            }

            over "collisions"
            {
                token visibility = "inherited"
            }
        }

        over "robotiq_arg2f_base_link"
        {
            over "finger_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }

            over "left_inner_knuckle_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }

            over "right_inner_knuckle_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }

            over "right_outer_knuckle_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }

            over "visuals"
            {
                token visibility = "inherited"
            }

            over "collisions"
            {
                token visibility = "inherited"
            }
        }

        over "left_outer_knuckle"
        {
            over "visuals"
            {
                token visibility = "inherited"
            }

            over "collisions"
            {
                token visibility = "inherited"
            }
        }

        over "left_inner_knuckle"
        {
            over "visuals"
            {
                token visibility = "inherited"
            }

            over "collisions"
            {
                token visibility = "inherited"
            }
        }

        over "right_inner_knuckle"
        {
            over "visuals"
            {
                token visibility = "inherited"
            }

            over "collisions"
            {
                token visibility = "inherited"
            }
        }

        over "right_outer_knuckle"
        {
            over "visuals"
            {
                token visibility = "inherited"
            }

            over "collisions"
            {
                token visibility = "inherited"
            }
        }

        over "left_outer_finger"
        {
            over "left_inner_finger_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }

            over "visuals"
            {
                token visibility = "inherited"
            }

            over "collisions"
            {
                token visibility = "inherited"
            }
        }

        over "right_outer_finger"
        {
            over "right_inner_finger_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }

            over "visuals"
            {
                token visibility = "inherited"
            }

            over "collisions"
            {
                token visibility = "inherited"
            }
        }

        over "left_inner_finger"
        {
            over "visuals"
            {
                token visibility = "inherited"
            }

            over "collisions"
            {
                token visibility = "inherited"
            }
        }

        over "right_inner_finger"
        {
            over "visuals"
            {
                token visibility = "inherited"
            }

            over "collisions"
            {
                token visibility = "inherited"
            }
        }

        over "left_inner_finger_pad"
        {
        }

        over "right_inner_finger_pad"
        {
        }
    }
}

def Xform "Environment"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float angle = 1
        float intensity = 3000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        quatd xformOp:orient = (0.6532814824381883, 0.27059805007309856, 0.27059805007309856, 0.6532814824381883)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

